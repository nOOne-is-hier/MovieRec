"""
Django settings for mypjt project.

Generated by 'django-admin startproject' using Django 4.2.16.
"""
import environ
import os


# Base directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# django-environ 초기화
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# 민감한 설정 값을 .env에서 로드
SECRET_KEY = env("SECRET_KEY")  # Django Secret Key
DEBUG = env.bool("DEBUG", default=False)  # Debug 모드
YOUTUBE_API_KEY = env("YOUTUBE_API_KEY")  # YouTube API 키

GOOGLE_CLIENT_ID = env("GOOGLE_CLIENT_ID")  # Google Client ID
GOOGLE_CLIENT_SECRET = env("GOOGLE_CLIENT_SECRET")  # Google Client Secret

NAVER_CLIENT_ID = env("NAVER_CLIENT_ID")  # Naver Client ID
NAVER_CLIENT_SECRET = env("NAVER_CLIENT_SECRET")  # Naver Client Secret

EMAIL_HOST_USER = env("EMAIL_HOST_USER")  # 이메일 계정
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")  # 이메일 비밀번호

TMDB_API_TOKEN = env("TMDB_API_TOKEN")  # TMDB API 토큰



from pathlib import Path
from datetime import timedelta
import os
ROOT_URLCONF = 'mypjt.urls'  # 여기서 'mypjt'는 Django 프로젝트 폴더 이름

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Security settings
# DEBUG = True
ALLOWED_HOSTS = []

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'
import os

MEDIA_URL = '/media/'  # URL로 접근할 경로
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 실제 파일 경로

# REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT 인증 방식
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',  # 기본 인증 필요
        'rest_framework.permissions.AllowAny',  

    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # 액세스 토큰 유효 시간
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # 리프레시 토큰 유효 시간
    'ROTATE_REFRESH_TOKENS': True,                  # 리프레시 토큰 갱신 시 새로 발급
    'BLACKLIST_AFTER_ROTATION': True,               # 블랙리스트 처리
    'AUTH_HEADER_TYPES': ('Bearer',),               # 헤더 타입 설정
}

# dj-rest-auth Settings
REST_USE_JWT = True  # dj-rest-auth에서 JWT 사용
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
}
REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
    "PASSWORD_RESET_SERIALIZER": "accounts.serializers.CustomPasswordResetSerializer",

}
JWT_AUTH_COOKIE = 'my-app-auth'
JWT_AUTH_REFRESH_COOKIE = 'my-refresh-token'
# Django Allauth Settings
SITE_ID = 1
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': f'{GOOGLE_CLIENT_ID}',
            'secret': f'{GOOGLE_CLIENT_SECRET}',
            'key': ''
        }
    }
}
LOGIN_REDIRECT_URL = '/'  # 로그인 후 리다이렉트할 URL

ACCOUNT_DEFAULT_HTTP_PROTOCOL='https'

# 비밀번호 찾기
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 개발용 콘솔 출력
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'no-reply@movierec.com'  # 기본 발신 이메일





# Installed Apps
INSTALLED_APPS = [
    'drf_yasg',
    'corsheaders',
    'community',
    'accounts',
    'movies',

    # Authentication Apps
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'rest_framework',
    'rest_framework.authtoken',
    "rest_framework_simplejwt",
    'allauth.socialaccount.providers.google',  # Google 소셜 로그인 제공자


    # Default Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
]

# Static and Media Files
STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI
WSGI_APPLICATION = 'mypjt.wsgi.application'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Default Primary Key Field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
